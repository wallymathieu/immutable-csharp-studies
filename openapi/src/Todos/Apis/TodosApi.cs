/* 
 * Todo MVC backend style API
 *
 * This is a simple API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Todos.Client;
using Todos.Models;

namespace Todos.Apis
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodosApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// adds a todo item
        /// </summary>
        /// <remarks>
        /// Adds a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns></returns>
        void AddTodo (UpdateTodoItem updateTodoItem = null);

        /// <summary>
        /// adds a todo item
        /// </summary>
        /// <remarks>
        /// Adds a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddTodoWithHttpInfo (UpdateTodoItem updateTodoItem = null);
        /// <summary>
        /// delete a todo item
        /// </summary>
        /// <remarks>
        /// delete a todo from the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns></returns>
        void DeleteTodo (decimal id);

        /// <summary>
        /// delete a todo item
        /// </summary>
        /// <remarks>
        /// delete a todo from the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTodoWithHttpInfo (decimal id);
        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>List&lt;TodoItem&gt;</returns>
        List<TodoItem> SearchInventory (string q = null, int? skip = null, int? limit = null);

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;TodoItem&gt;</returns>
        ApiResponse<List<TodoItem>> SearchInventoryWithHttpInfo (string q = null, int? skip = null, int? limit = null);
        /// <summary>
        /// update a todo item
        /// </summary>
        /// <remarks>
        /// Update a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns></returns>
        void UpdateTodo (decimal id, UpdateTodoItem updateTodoItem = null);

        /// <summary>
        /// update a todo item
        /// </summary>
        /// <remarks>
        /// Update a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateTodoWithHttpInfo (decimal id, UpdateTodoItem updateTodoItem = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodosApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// adds a todo item
        /// </summary>
        /// <remarks>
        /// Adds a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddTodoAsync (UpdateTodoItem updateTodoItem = null);

        /// <summary>
        /// adds a todo item
        /// </summary>
        /// <remarks>
        /// Adds a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddTodoAsyncWithHttpInfo (UpdateTodoItem updateTodoItem = null);
        /// <summary>
        /// delete a todo item
        /// </summary>
        /// <remarks>
        /// delete a todo from the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTodoAsync (decimal id);

        /// <summary>
        /// delete a todo item
        /// </summary>
        /// <remarks>
        /// delete a todo from the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTodoAsyncWithHttpInfo (decimal id);
        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>Task of List&lt;TodoItem&gt;</returns>
        System.Threading.Tasks.Task<List<TodoItem>> SearchInventoryAsync (string q = null, int? skip = null, int? limit = null);

        /// <summary>
        /// searches inventory
        /// </summary>
        /// <remarks>
        /// By passing in the appropriate options, you can search for available inventory in the system 
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TodoItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TodoItem>>> SearchInventoryAsyncWithHttpInfo (string q = null, int? skip = null, int? limit = null);
        /// <summary>
        /// update a todo item
        /// </summary>
        /// <remarks>
        /// Update a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateTodoAsync (decimal id, UpdateTodoItem updateTodoItem = null);

        /// <summary>
        /// update a todo item
        /// </summary>
        /// <remarks>
        /// Update a todo to the system
        /// </remarks>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateTodoAsyncWithHttpInfo (decimal id, UpdateTodoItem updateTodoItem = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITodosApi : ITodosApiSync, ITodosApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TodosApi : ITodosApi
    {
        private Todos.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TodosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TodosApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TodosApi(String basePath)
        {
            this.Configuration = Todos.Client.Configuration.MergeConfigurations(
                Todos.Client.GlobalConfiguration.Instance,
                new Todos.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Todos.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Todos.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Todos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TodosApi(Todos.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Todos.Client.Configuration.MergeConfigurations(
                Todos.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Todos.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Todos.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Todos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TodosApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TodosApi(Todos.Client.ISynchronousClient client,Todos.Client.IAsynchronousClient asyncClient, Todos.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Todos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Todos.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Todos.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Todos.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Todos.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// adds a todo item Adds a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns></returns>
        public void AddTodo (UpdateTodoItem updateTodoItem = null)
        {
             AddTodoWithHttpInfo(updateTodoItem);
        }

        /// <summary>
        /// adds a todo item Adds a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Todos.Client.ApiResponse<Object> AddTodoWithHttpInfo (UpdateTodoItem updateTodoItem = null)
        {
            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Todos.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Todos.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = updateTodoItem;


            // make the HTTP request

            var response = this.Client.Post<Object>("/api/todos", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// adds a todo item Adds a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddTodoAsync (UpdateTodoItem updateTodoItem = null)
        {
             await AddTodoAsyncWithHttpInfo(updateTodoItem);

        }

        /// <summary>
        /// adds a todo item Adds a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateTodoItem">Inventory todo to add (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Todos.Client.ApiResponse<Object>> AddTodoAsyncWithHttpInfo (UpdateTodoItem updateTodoItem = null)
        {

            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = updateTodoItem;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/api/todos", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// delete a todo item delete a todo from the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns></returns>
        public void DeleteTodo (decimal id)
        {
             DeleteTodoWithHttpInfo(id);
        }

        /// <summary>
        /// delete a todo item delete a todo from the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Todos.Client.ApiResponse<Object> DeleteTodoWithHttpInfo (decimal id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Todos.Client.ApiException(400, "Missing required parameter 'id' when calling TodosApi->DeleteTodo");

            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Todos.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Todos.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Todos.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete<Object>("/api/todos/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// delete a todo item delete a todo from the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTodoAsync (decimal id)
        {
             await DeleteTodoAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// delete a todo item delete a todo from the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Todos.Client.ApiResponse<Object>> DeleteTodoAsyncWithHttpInfo (decimal id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Todos.Client.ApiException(400, "Missing required parameter 'id' when calling TodosApi->DeleteTodo");


            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Todos.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/api/todos/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>List&lt;TodoItem&gt;</returns>
        public List<TodoItem> SearchInventory (string q = null, int? skip = null, int? limit = null)
        {
             Todos.Client.ApiResponse<List<TodoItem>> localVarResponse = SearchInventoryWithHttpInfo(q, skip, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>ApiResponse of List&lt;TodoItem&gt;</returns>
        public Todos.Client.ApiResponse< List<TodoItem> > SearchInventoryWithHttpInfo (string q = null, int? skip = null, int? limit = null)
        {
            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Todos.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Todos.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (q != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<TodoItem> >("/api/todos", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchInventory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>Task of List&lt;TodoItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<TodoItem>> SearchInventoryAsync (string q = null, int? skip = null, int? limit = null)
        {
             Todos.Client.ApiResponse<List<TodoItem>> localVarResponse = await SearchInventoryAsyncWithHttpInfo(q, skip, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// searches inventory By passing in the appropriate options, you can search for available inventory in the system 
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">pass an optional search string for looking up todos (optional)</param>
        /// <param name="skip">number of records to skip for pagination (optional)</param>
        /// <param name="limit">maximum number of records to return (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TodoItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Todos.Client.ApiResponse<List<TodoItem>>> SearchInventoryAsyncWithHttpInfo (string q = null, int? skip = null, int? limit = null)
        {

            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (q != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "q", q))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (skip != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "skip", skip))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Todos.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<TodoItem>>("/api/todos", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SearchInventory", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// update a todo item Update a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns></returns>
        public void UpdateTodo (decimal id, UpdateTodoItem updateTodoItem = null)
        {
             UpdateTodoWithHttpInfo(id, updateTodoItem);
        }

        /// <summary>
        /// update a todo item Update a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Todos.Client.ApiResponse<Object> UpdateTodoWithHttpInfo (decimal id, UpdateTodoItem updateTodoItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Todos.Client.ApiException(400, "Missing required parameter 'id' when calling TodosApi->UpdateTodo");

            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Todos.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Todos.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", Todos.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = updateTodoItem;


            // make the HTTP request

            var response = this.Client.Put<Object>("/api/todos/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// update a todo item Update a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateTodoAsync (decimal id, UpdateTodoItem updateTodoItem = null)
        {
             await UpdateTodoAsyncWithHttpInfo(id, updateTodoItem);

        }

        /// <summary>
        /// update a todo item Update a todo to the system
        /// </summary>
        /// <exception cref="Todos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The todo item id</param>
        /// <param name="updateTodoItem">Inventory todo to update (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Todos.Client.ApiResponse<Object>> UpdateTodoAsyncWithHttpInfo (decimal id, UpdateTodoItem updateTodoItem = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Todos.Client.ApiException(400, "Missing required parameter 'id' when calling TodosApi->UpdateTodo");


            Todos.Client.RequestOptions requestOptions = new Todos.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", Todos.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = updateTodoItem;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/todos/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTodo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
