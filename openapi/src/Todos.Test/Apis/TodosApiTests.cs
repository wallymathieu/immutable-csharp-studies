/* 
 * Todo MVC backend style API
 *
 * This is a simple API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Todos.Client;
using Todos.Apis;
using Todos.Models;

namespace Todos.Test
{
    /// <summary>
    ///  Class for testing TodosApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TodosApiTests : IDisposable
    {
        private TodosApi instance;

        public TodosApiTests()
        {
            instance = new TodosApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TodosApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TodosApi
            //Assert.IsType(typeof(TodosApi), instance, "instance is a TodosApi");
        }

        
        /// <summary>
        /// Test AddTodo
        /// </summary>
        [Fact]
        public void AddTodoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateTodoItem updateTodoItem = null;
            //instance.AddTodo(updateTodoItem);
            
        }
        
        /// <summary>
        /// Test DeleteTodo
        /// </summary>
        [Fact]
        public void DeleteTodoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //instance.DeleteTodo(id);
            
        }
        
        /// <summary>
        /// Test SearchInventory
        /// </summary>
        [Fact]
        public void SearchInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //int? skip = null;
            //int? limit = null;
            //var response = instance.SearchInventory(q, skip, limit);
            //Assert.IsType<List<TodoItem>> (response, "response is List<TodoItem>");
        }
        
        /// <summary>
        /// Test UpdateTodo
        /// </summary>
        [Fact]
        public void UpdateTodoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal id = null;
            //UpdateTodoItem updateTodoItem = null;
            //instance.UpdateTodo(id, updateTodoItem);
            
        }
        
    }

}
